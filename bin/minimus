#!/usr/bin/env node

var exec    = require('child_process').exec,
    fs      = require('fs'),
    knox    = require('knox'),
    Step    = require('step'),
    util    = require('util'),

    helpers = require('../lib/helpers');

(function () {
    var settings    = helpers.settings(),
        assets      = helpers.assets(settings.assetsFile),                      // blocking under the hood
        client      = knox.createClient(assets.s3);

    console.log('processing yaml file: ' + settings.assetsFile);

    Step(
        function execJammit () {
            var command = util.format('jammit -f -c %s -o %s', settings.assetsFile, settings.minifiedPath);

            exec(command, this);
        },
        function readAssetDir (err, stdout, stderr) {
            err = err || stderr;
            if (err) throw err;
            
            fs.readdir(settings.minifiedPath, this);
        },
        function pushAssetsToS3 (err, files) {
            if (err) throw err;
                
            var group = this.group();
                
            files.forEach(function (file) {
                pushFile(file, group());
            });
        },
        function done (err) {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            else {
                console.log('files uploaded to S3');
                process.exit(0);
            }
        }
    );

    function pushFile (file, callback) {
        var sourcePath      = settings.minifiedPath + '/' + file,           // ex. '/path/to/proj/assets/foo.js'
            destinationPath = helpers.mapAssetType(file) + '/' + file,      // ex. 'javascripts/foo.js' under S3 bucket
            headers         = {};

        // override with hash
        if (assets.s3.hasOwnProperty('hash')) {
            destinationPath = destinationPath.replace('.', '-' + assets.s3.hash + '.');
        }

        headers = {
            'Content-Type': helpers.mapMimeType(file),
            'x-amz-acl':    'public-read'
        };
                
        client.putFile(sourcePath, destinationPath, headers, function (err, res) {
            if (err || res.statusCode !== 200) {
                console.error('failed uploading file: ' + destinationPath + ' with status: ' + res.statusCode);
            }
            else {
                console.log('uploaded file: ' + assets.s3.bucket + '/' + destinationPath);
            }

            callback(err);
        });
    };
})();
